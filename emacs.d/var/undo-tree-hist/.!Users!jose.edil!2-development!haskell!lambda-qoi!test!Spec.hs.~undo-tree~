(undo-tree-save-format-version . 1)
"65664d81293af015da964373380481d99de80c6f"
[nil nil nil nil (25467 35898 726774 0) 0 nil]
([nil nil ((1 . 18) (t 25461 8485 918609 900000)) nil (25467 35898 726773 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t ws-butler-chg chg)) . -13) (undo-tree-id393 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg)) . -14) (undo-tree-id394 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -15) (undo-tree-id395 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -16) (undo-tree-id396 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -17) (undo-tree-id397 . -1) 18) nil (25467 35898 726770 0) 0 nil])
([nil nil ((13 . 18)) nil (25467 35898 726762 0) 0 nil])
([nil nil ((18 . 22)) nil (25467 35898 726761 0) 0 nil])
([nil nil ((20 . 32)) nil (25467 35898 726760 0) 0 nil])
([nil nil ((32 . 33)) nil (25467 35898 726759 0) 0 nil])
([nil nil ((33 . 39)) nil (25467 35898 726758 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t ws-butler-chg chg face haskell-keyword-face)) . -38) (undo-tree-id392 . -1) 39) nil (25467 35898 726757 0) 0 nil])
([nil nil ((38 . 45)) nil (25467 35898 726754 0) 0 nil])
([nil nil ((45 . 46)) nil (25467 35898 726753 0) 0 nil])
([nil nil ((46 . 47)) nil (25467 35898 726752 0) 0 nil])
([nil nil ((#("Tasty, " 0 5 (fontified t ws-butler-chg chg face haskell-constructor-face) 5 7 (fontified t ws-butler-chg chg)) . -40) (undo-tree-id391 . -7) 47) nil (25467 35898 726751 0) 0 nil])
([nil nil ((40 . 56)) nil (25467 35898 726749 0) 0 nil])
([nil nil ((27 . 32)) nil (25467 35898 726748 0) 0 nil])
([nil nil ((62 . 64)) nil (25467 35898 726747 0) 0 nil])
([nil nil ((63 . 76)) nil (25467 35898 726746 0) 0 nil])
([nil nil ((#("putStrLn \"Test suite not yet implemented\"" 0 9 (fontified t) 9 41 (fontified t face font-lock-string-face)) . 99) (undo-tree-id377 . -8) (undo-tree-id378 . -8) (undo-tree-id379 . -8) (undo-tree-id380 . -8) (undo-tree-id381 . -8) (undo-tree-id382 . -8) (undo-tree-id383 . -8) (undo-tree-id384 . -8) (undo-tree-id385 . -41) (undo-tree-id386 . -41) (undo-tree-id387 . -41) (undo-tree-id388 . -41) (undo-tree-id389 . -41) (undo-tree-id390 . -41)) nil (25467 35898 726744 0) 0 nil])
([nil nil ((99 . 106)) nil (25467 35898 726724 0) 0 nil])
([nil nil ((#("k" 0 1 (fontified t ws-butler-chg chg)) . -105) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) 106) nil (25467 35898 726722 0) 0 nil])
([nil nil ((105 . 107)) nil (25467 35898 726711 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t ws-butler-chg chg)) . -105) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -106) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) 107) nil (25467 35898 726708 0) 0 nil])
([nil nil ((105 . 117)) nil (25467 35898 726665 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t ws-butler-chg chg)) . -114) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -115) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -116) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) 117) nil (25467 35898 726660 0) 0 nil])
([nil nil ((114 . 116)) nil (25467 35898 726555 0) 0 nil])
([nil nil ((116 . 118)) nil (25467 35898 726555 0) 0 nil])
([nil nil ((118 . 126)) nil (25467 35898 726554 0) 0 nil])
([nil nil ((126 . 135)) nil (25467 35898 726553 0) 0 nil])
([nil nil ((135 . 136)) nil (25467 35898 726552 0) 0 nil])
([nil nil ((136 . 157)) nil (25467 35898 726551 0) 0 nil])
([nil nil ((157 . 158)) nil (25467 35898 726550 0) 0 nil])
([nil nil ((158 . 160)) nil (25467 35898 726549 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t ws-butler-chg chg face haskell-constructor-face)) . -157) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face haskell-constructor-face)) . -158) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face haskell-constructor-face)) . -159) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) 160) nil (25467 35898 726544 0) 0 nil])
([nil nil ((#("Hea" 0 3 (fontified t ws-butler-chg chg face haskell-constructor-face)) . -154) (undo-tree-id112 . -3) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -2) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -3) (undo-tree-id131 . -2) (undo-tree-id132 . -1) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -1) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -1) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -1) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -1) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -1) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -1) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) 157) nil (25467 35898 726438 0) 0 nil])
([nil nil ((154 . 162)) nil (25467 35898 726322 0) 0 nil])
([nil nil ((162 . 163)) nil (25467 35898 726321 0) 0 nil])
([nil nil ((163 . 164)) nil (25467 35898 726320 0) 0 nil])
([nil nil ((163 . 165)) nil (25467 35898 726319 0) 0 nil])
([nil nil ((166 . 187)) nil (25467 35898 726318 0) 0 nil])
([nil nil ((187 . 188)) nil (25467 35898 726317 0) 0 nil])
([nil nil ((#("validHeader" 0 11 (fontified t ws-butler-chg chg face font-lock-string-face)) . -177) (undo-tree-id17 . -11) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -2) (undo-tree-id26 . -1) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -3) (undo-tree-id34 . -2) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -4) (undo-tree-id42 . -3) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -5) (undo-tree-id50 . -4) (undo-tree-id51 . -5) (undo-tree-id52 . -5) (undo-tree-id53 . -5) (undo-tree-id54 . -5) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -6) (undo-tree-id58 . -5) (undo-tree-id59 . -6) (undo-tree-id60 . -6) (undo-tree-id61 . -6) (undo-tree-id62 . -6) (undo-tree-id63 . -6) (undo-tree-id64 . -6) (undo-tree-id65 . -7) (undo-tree-id66 . -6) (undo-tree-id67 . -7) (undo-tree-id68 . -7) (undo-tree-id69 . -7) (undo-tree-id70 . -7) (undo-tree-id71 . -7) (undo-tree-id72 . -7) (undo-tree-id73 . -8) (undo-tree-id74 . -7) (undo-tree-id75 . -8) (undo-tree-id76 . -8) (undo-tree-id77 . -8) (undo-tree-id78 . -8) (undo-tree-id79 . -8) (undo-tree-id80 . -8) (undo-tree-id81 . -9) (undo-tree-id82 . -8) (undo-tree-id83 . -9) (undo-tree-id84 . -9) (undo-tree-id85 . -9) (undo-tree-id86 . -9) (undo-tree-id87 . -9) (undo-tree-id88 . -9) (undo-tree-id89 . -10) (undo-tree-id90 . -9) (undo-tree-id91 . -10) (undo-tree-id92 . -10) (undo-tree-id93 . -10) (undo-tree-id94 . -10) (undo-tree-id95 . -10) (undo-tree-id96 . -10) (undo-tree-id97 . -11) (undo-tree-id98 . -10) (undo-tree-id99 . -11) (undo-tree-id100 . -11) (undo-tree-id101 . -11) (undo-tree-id102 . -11) (undo-tree-id103 . -11) (undo-tree-id104 . -11) (undo-tree-id105 . -11) (undo-tree-id106 . -11) (undo-tree-id107 . -11) (undo-tree-id108 . -11) (undo-tree-id109 . -11) (undo-tree-id110 . -11) (undo-tree-id111 . -11) 188) nil (25467 35898 726311 0) 0 nil])
([nil nil ((177 . 197)) nil (25467 35898 726174 0) 0 nil])
([nil nil ((197 . 200)) nil (25467 35898 726173 0) 0 nil])
([nil nil ((200 . 202)) nil (25467 35898 726172 0) 0 nil])
([nil nil ((#("  " 0 2 (fontified t ws-butler-chg chg)) . -200) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) 202) nil (25467 35898 726169 0) 0 nil])
([nil nil ((200 . 202)) nil (25467 35898 726131 0) 0 nil])
([nil nil ((63 . 65)) nil (25467 35898 726129 0) 0 nil])
([nil nil ((63 . 81)) nil (25467 35898 726123 0) 0 nil])
([nil nil ((222 . 228) (t 25467 35898 732474 770000)) nil (25467 35949 384869 0) 0 nil])
([nil nil ((228 . 229)) nil (25467 35949 384868 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 330 . 331) (nil fontified nil 329 . 331) (nil fontified nil 328 . 329) (nil fontified nil 326 . 328) (nil fontified nil 325 . 326) (nil fontified nil 323 . 325) (nil fontified nil 321 . 323) (nil fontified nil 319 . 321) (nil fontified nil 318 . 319) (nil fontified nil 316 . 318) (nil fontified nil 315 . 316) (nil fontified nil 313 . 315) (nil fontified nil 312 . 313) (nil fontified nil 310 . 312) (nil fontified nil 308 . 310) (nil fontified nil 306 . 308) (nil fontified nil 305 . 306) (nil fontified nil 303 . 305) (nil fontified nil 302 . 303) (nil fontified nil 300 . 302) (nil fontified nil 299 . 300) (nil fontified nil 297 . 299) (nil fontified nil 294 . 297) (nil fontified nil 292 . 294) (nil fontified nil 289 . 292) (nil fontified nil 287 . 289) (nil fontified nil 284 . 287) (nil fontified nil 282 . 284) (nil fontified nil 279 . 282) (nil fontified nil 270 . 279) (nil fontified nil 269 . 270) (nil fontified nil 268 . 269) (nil fontified nil 263 . 268) (nil fontified nil 262 . 263) (nil fontified nil 257 . 262) (nil fontified nil 256 . 257) (nil fontified nil 244 . 256) (nil fontified nil 243 . 244) (nil fontified nil 241 . 243) (nil fontified nil 240 . 241) (nil fontified nil 235 . 240) (nil fontified nil 234 . 235) (nil fontified nil 230 . 234) (nil fontified nil 229 . 230) (229 . 331)) nil (25467 35949 384866 0) 0 nil])
([nil nil ((#("validHeader" 0 1 (ws-butler-chg chg fontified t) 1 5 (ws-butler-chg chg fontified t) 5 6 (ws-butler-chg chg fontified t) 6 11 (ws-butler-chg chg fontified t)) . 229) (undo-tree-id460 . -1) (undo-tree-id461 . -11) (undo-tree-id462 . -11) (undo-tree-id463 . -11) (undo-tree-id464 . -11) (undo-tree-id465 . -11) (undo-tree-id466 . -11) (undo-tree-id467 . -11) (undo-tree-id468 . -11) (undo-tree-id469 . -11)) nil (25467 35949 384857 0) 0 nil])
([nil nil ((#(" :: B" 0 1 (ws-butler-chg delete fontified t) 1 3 (ws-butler-chg chg fontified t syntax-table (1) face haskell-operator-face) 3 4 (ws-butler-chg chg fontified t font-lock-multiline t haskell-type t) 4 5 (ws-butler-chg chg fontified t font-lock-multiline t haskell-type t face haskell-type-face)) . 229) (undo-tree-id445 . -1) (undo-tree-id446 . -4) (undo-tree-id447 . -1) (undo-tree-id448 . -2) (undo-tree-id449 . -4) (undo-tree-id450 . -4) (undo-tree-id451 . -5) (undo-tree-id452 . -1) (undo-tree-id453 . -4) (undo-tree-id454 . -1) (undo-tree-id455 . -2) (undo-tree-id456 . -4) (undo-tree-id457 . -4) (undo-tree-id458 . -5) (undo-tree-id459 . -5)) nil (25467 35949 384845 0) 0 nil])
([nil nil ((#(".ByteString" 0 1 (ws-butler-chg delete fontified t syntax-table (1) face haskell-operator-face) 1 11 (ws-butler-chg chg fontified t face haskell-constructor-face)) . 229) (undo-tree-id436 . -11) (undo-tree-id437 . -11) (undo-tree-id438 . -11) (undo-tree-id439 . -11) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -2) (undo-tree-id444 . -11)) nil (25467 35949 384828 0) 0 nil])
([nil nil ((#("
validHeader" 0 1 (ws-butler-chg delete fontified t) 1 6 (ws-butler-chg chg fontified t face haskell-definition-face) 6 7 (ws-butler-chg chg fontified t face haskell-definition-face) 7 12 (ws-butler-chg chg fontified t face haskell-definition-face)) . 229) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -2) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -12)) nil (25467 35949 384816 0) 0 nil])
([nil nil ((#(" = B" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t syntax-table (1) face haskell-operator-face) 2 4 (ws-butler-chg chg fontified t)) . 229) (undo-tree-id398 . -1) (undo-tree-id399 . -3) (undo-tree-id400 . -1) (undo-tree-id401 . -2) (undo-tree-id402 . -3) (undo-tree-id403 . -4) (undo-tree-id404 . -1) (undo-tree-id405 . -3) (undo-tree-id406 . -1) (undo-tree-id407 . -3) (undo-tree-id408 . -1) (undo-tree-id409 . -3) (undo-tree-id410 . -1) (undo-tree-id411 . -3) (undo-tree-id412 . -1) (undo-tree-id413 . -2) (undo-tree-id414 . -3) (undo-tree-id415 . -4) (undo-tree-id416 . -4)) nil (25467 35949 384793 0) 0 nil])
([nil nil ((229 . 230)) nil (25467 35949 384763 0) 0 nil])
([nil nil ((82 . 103)) nil (25467 35949 384762 0) 0 nil])
([nil nil ((103 . 119)) nil (25467 35949 384760 0) 0 nil])
([nil nil ((114 . 119)) nil (25467 35949 384755 0) 0 nil])
([nil nil ((330 . 334) (t 25467 35949 388954 160000)) nil (25467 36097 981292 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t ws-butler-chg chg syntax-table (1) face haskell-operator-face)) . -331) (undo-tree-id512 . -1) (#("=" 0 1 (ws-butler-chg chg fontified t syntax-table (1) face haskell-operator-face)) . -332) (undo-tree-id513 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -333) (undo-tree-id514 . -1) 334) nil (25467 36097 981290 0) 0 nil])
([nil nil ((331 . 334)) nil (25467 36097 981284 0) 0 nil])
([nil nil ((333 . 338) (#(" " 0 1 (fontified t ws-butler-chg chg)) . 333) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) 334) nil (25467 36097 981282 0) 0 nil])
([nil nil ((nil read-only t 346 . 405) (nil font-lock-face haskell-interactive-face-result 346 . 405) (nil fontified nil 346 . 405) (nil read-only t 338 . 346) (nil font-lock-face haskell-interactive-face-result 338 . 346) (nil fontified nil 338 . 346) (338 . 405)) nil (25467 36097 981252 0) 0 nil])
([nil nil ((#(")" 0 1 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t)) . -404) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . 1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) 405) nil (25467 36097 981244 0) 0 nil])
([nil nil ((228 . 233) (#(" " 0 1 (fontified t)) . 228) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) 229 (t 25467 36097 986173 184000)) nil (25467 36146 618970 0) 0 nil])
([nil nil ((229 . 234) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 229) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) 233) nil (25467 36146 618928 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . -230) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -231) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -232) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -233) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) 234) nil (25467 36146 618910 0) 0 nil])
([nil nil ((230 . 249)) nil (25467 36146 618801 0) 0 nil])
([nil nil ((249 . 257)) nil (25467 36146 618801 0) 0 nil])
([nil nil ((257 . 258)) nil (25467 36146 618800 0) 0 nil])
([nil nil ((258 . 278)) nil (25467 36146 618799 0) 0 nil])
([nil nil ((#("M" 0 1 (fontified t ws-butler-chg chg face haskell-definition-face)) . -241) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg face haskell-definition-face)) . -242) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg face haskell-definition-face)) . -243) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg face haskell-definition-face)) . -244) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg face haskell-definition-face)) . -245) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) 246) nil (25467 36146 618787 0) 0 nil])
([nil nil ((241 . 247)) nil (25467 36146 618481 0) 0 nil])
([nil nil ((314 . 330) 327 (t 25467 36146 623449 892000)) nil (25467 36151 463445 0) 0 nil])
([nil nil ((nil result t 404 . 420) (nil prompt t 404 . 420) (nil fontified t 404 . 420) (nil face haskell-constructor-face 404 . 420) (nil rear-nonsticky (face prompt result) 404 . 420) (nil front-sticky (face prompt result) 404 . 420) (404 . 420) 433) nil (25467 36151 463444 0) 0 nil])
([nil nil ((#("                  " 0 2 (fontified t) 2 18 (ws-butler-chg chg fontified t)) . -312) (undo-tree-id940 . -18) (undo-tree-id941 . -18) (undo-tree-id942 . -18) (undo-tree-id943 . -18) (undo-tree-id944 . -18) (undo-tree-id945 . -18) 359) nil (25467 36151 463440 0) 0 nil])
([nil nil ((#("                  " 0 2 (fontified t) 2 18 (ws-butler-chg chg fontified t)) . -384) (undo-tree-id928 . -18) (undo-tree-id929 . -18) (undo-tree-id930 . -18) (undo-tree-id931 . -18) (undo-tree-id932 . -18) (undo-tree-id933 . -18) (undo-tree-id934 . -18) (undo-tree-id935 . -18) (undo-tree-id936 . -18) (undo-tree-id937 . -18) (undo-tree-id938 . -18) (undo-tree-id939 . -18) 413) nil (25467 36151 463426 0) 0 nil])
([nil nil ((228 . 247) (t 25467 36151 468580 138000)) nil (25467 36197 305393 0) 0 nil])
([nil nil ((247 . 248)) nil (25467 36197 305387 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face haskell-keyword-face)) . -70) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) 71 (t 25467 36197 310363 261000)) nil (25467 36324 981318 0) 0 nil])
([nil nil ((70 . 71)) nil (25467 36324 981267 0) 0 nil])
([nil nil ((#("=" 0 1 (syntax-table (1) fontified t face haskell-operator-face)) . -268) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) 269 (t 25467 36324 986748 256000)) nil (25467 36339 688890 0) 0 nil])
([nil nil ((268 . 270)) nil (25467 36339 688864 0) 0 nil])
([nil nil ((125 . 126) (t 25467 36339 694270 452000)) nil (25467 36440 783094 0) 0 nil])
([nil nil ((400 . 401) (t 25467 36352 772223 290000)) nil (25467 36446 469221 0) 0 nil] [nil nil ((#("B.pack [113, 111, 105, 102, 0, 0, 0, 10, 0, 0, 0, 10, 3, 0]" 0 1 (fontified t) 1 2 (fontified t) 2 8 (fontified t) 8 11 (syntax-table (2) fontified t) 11 13 (fontified t) 13 16 (syntax-table (2) fontified t) 16 18 (fontified t) 18 21 (syntax-table (2) fontified t) 21 23 (fontified t) 23 26 (syntax-table (2) fontified t) 26 28 (fontified t) 28 29 (syntax-table (2) fontified t) 29 31 (fontified t) 31 32 (syntax-table (2) fontified t) 32 34 (fontified t) 34 35 (syntax-table (2) fontified t) 35 37 (fontified t) 37 39 (syntax-table (2) fontified t) 39 41 (fontified t) 41 42 (syntax-table (2) fontified t) 42 44 (fontified t) 44 45 (syntax-table (2) fontified t) 45 47 (fontified t) 47 48 (syntax-table (2) fontified t) 48 50 (fontified t) 50 52 (syntax-table (2) fontified t) 52 54 (fontified t) 54 55 (syntax-table (2) fontified t) 55 57 (fontified t) 57 58 (syntax-table (2) fontified t) 58 59 (fontified t)) . -341) (undo-tree-id985 . -59) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -59) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -6) (undo-tree-id1003 . -1) (undo-tree-id1004 . -6) (undo-tree-id1005 . -6) (undo-tree-id1006 . -6) (undo-tree-id1007 . -6) (undo-tree-id1008 . -6) (undo-tree-id1009 . -6) (undo-tree-id1010 . -11) (undo-tree-id1011 . -6) (undo-tree-id1012 . -11) (undo-tree-id1013 . -11) (undo-tree-id1014 . -11) (undo-tree-id1015 . -11) (undo-tree-id1016 . -11) (undo-tree-id1017 . -11) (undo-tree-id1018 . -16) (undo-tree-id1019 . -11) (undo-tree-id1020 . -16) (undo-tree-id1021 . -16) (undo-tree-id1022 . -16) (undo-tree-id1023 . -16) (undo-tree-id1024 . -16) (undo-tree-id1025 . -16) (undo-tree-id1026 . -21) (undo-tree-id1027 . -16) (undo-tree-id1028 . -21) (undo-tree-id1029 . -21) (undo-tree-id1030 . -21) (undo-tree-id1031 . -21) (undo-tree-id1032 . -21) (undo-tree-id1033 . -21) (undo-tree-id1034 . -26) (undo-tree-id1035 . -21) (undo-tree-id1036 . -26) (undo-tree-id1037 . -26) (undo-tree-id1038 . -26) (undo-tree-id1039 . -26) (undo-tree-id1040 . -26) (undo-tree-id1041 . -26) (undo-tree-id1042 . -29) (undo-tree-id1043 . -26) (undo-tree-id1044 . -29) (undo-tree-id1045 . -29) (undo-tree-id1046 . -29) (undo-tree-id1047 . -29) (undo-tree-id1048 . -29) (undo-tree-id1049 . -29) (undo-tree-id1050 . -32) (undo-tree-id1051 . -29) (undo-tree-id1052 . -32) (undo-tree-id1053 . -32) (undo-tree-id1054 . -32) (undo-tree-id1055 . -32) (undo-tree-id1056 . -32) (undo-tree-id1057 . -32) (undo-tree-id1058 . -35) (undo-tree-id1059 . -32) (undo-tree-id1060 . -35) (undo-tree-id1061 . -35) (undo-tree-id1062 . -35) (undo-tree-id1063 . -35) (undo-tree-id1064 . -35) (undo-tree-id1065 . -35) (undo-tree-id1066 . -39) (undo-tree-id1067 . -35) (undo-tree-id1068 . -39) (undo-tree-id1069 . -39) (undo-tree-id1070 . -39) (undo-tree-id1071 . -39) (undo-tree-id1072 . -39) (undo-tree-id1073 . -39) (undo-tree-id1074 . -42) (undo-tree-id1075 . -39) (undo-tree-id1076 . -42) (undo-tree-id1077 . -42) (undo-tree-id1078 . -42) (undo-tree-id1079 . -42) (undo-tree-id1080 . -42) (undo-tree-id1081 . -42) (undo-tree-id1082 . -45) (undo-tree-id1083 . -42) (undo-tree-id1084 . -45) (undo-tree-id1085 . -45) (undo-tree-id1086 . -45) (undo-tree-id1087 . -45) (undo-tree-id1088 . -45) (undo-tree-id1089 . -45) (undo-tree-id1090 . -48) (undo-tree-id1091 . -45) (undo-tree-id1092 . -48) (undo-tree-id1093 . -48) (undo-tree-id1094 . -48) (undo-tree-id1095 . -48) (undo-tree-id1096 . -48) (undo-tree-id1097 . -48) (undo-tree-id1098 . -52) (undo-tree-id1099 . -48) (undo-tree-id1100 . -52) (undo-tree-id1101 . -52) (undo-tree-id1102 . -52) (undo-tree-id1103 . -52) (undo-tree-id1104 . -52) (undo-tree-id1105 . -52) (undo-tree-id1106 . -55) (undo-tree-id1107 . -52) (undo-tree-id1108 . -55) (undo-tree-id1109 . -55) (undo-tree-id1110 . -55) (undo-tree-id1111 . -55) (undo-tree-id1112 . -55) (undo-tree-id1113 . -55) (undo-tree-id1114 . -58) (undo-tree-id1115 . -55) (undo-tree-id1116 . -58) (undo-tree-id1117 . -58) (undo-tree-id1118 . -58) (undo-tree-id1119 . -58) (undo-tree-id1120 . -58) (undo-tree-id1121 . -58) (undo-tree-id1122 . -59) (undo-tree-id1123 . -58) (undo-tree-id1124 . -59) (undo-tree-id1125 . -59) (undo-tree-id1126 . -59) (undo-tree-id1127 . -59) (undo-tree-id1128 . -59) (undo-tree-id1129 . -59) (undo-tree-id1130 . 1) (undo-tree-id1131 . -59) (undo-tree-id1132 . 52) (undo-tree-id1133 . -8) (undo-tree-id1134 . -59) (undo-tree-id1135 . -59) (undo-tree-id1136 . -59) (undo-tree-id1137 . -59) (undo-tree-id1138 . -59) 399 (t 25467 36352 772223 290000)) ((nil ws-butler-chg delete 400 . 401) (341 . 400)) (25467 36440 317380 0) 0 nil])
([nil nil ((341 . 342)) nil (25467 36446 469216 0) 0 nil])
([nil nil ((341 . 342)) ((#("(" 0 1 (fontified t ws-butler-chg chg)) . 341) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1)) (25467 36440 317132 0) 0 nil])
([nil nil ((334 . 335) (t 25467 36446 475027 705000)) nil (25467 36483 131171 0) 0 nil])
nil
([nil nil ((475 . 476)) nil (25467 36483 131165 0) 0 nil])
([nil nil ((406 . 407) (t 25467 36483 137219 390000)) nil (25467 36547 503708 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -476) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . 1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) 477) nil (25467 36547 503701 0) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -334) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) 335) nil (25467 36547 503505 0) 0 nil])
([nil nil ((476 . 477) (t 25467 36547 509413 394000)) nil (25467 36825 416015 0) 0 nil])
([nil nil ((477 . 480)) nil (25467 36825 416013 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t ws-butler-chg chg)) . -477) (undo-tree-id1301 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -478) (undo-tree-id1302 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg)) . -479) (undo-tree-id1303 . -1) 480) nil (25467 36825 416012 0) 0 nil])
([nil nil ((nil fontified nil 701 . 702) (nil fontified nil 700 . 701) (nil fontified nil 699 . 700) (nil fontified nil 698 . 699) (nil fontified nil 697 . 698) (nil fontified nil 683 . 697) (nil fontified nil 682 . 683) (nil fontified nil 681 . 682) (nil fontified nil 680 . 681) (nil fontified nil 668 . 680) (nil fontified nil 666 . 668) (nil fontified nil 665 . 666) (nil fontified nil 664 . 665) (nil fontified nil 654 . 664) (nil fontified nil 652 . 654) (nil fontified nil 651 . 652) (nil fontified nil 650 . 651) (nil fontified nil 643 . 650) (nil fontified nil 641 . 643) (nil fontified nil 636 . 641) (nil fontified nil 635 . 636) (nil fontified nil 633 . 635) (nil fontified nil 632 . 633) (nil fontified nil 631 . 632) (nil fontified nil 630 . 631) (nil fontified nil 629 . 630) (nil fontified nil 628 . 629) (nil fontified nil 627 . 628) (nil fontified nil 626 . 627) (nil fontified nil 625 . 626) (nil fontified nil 623 . 625) (nil fontified nil 622 . 623) (nil fontified nil 620 . 622) (nil fontified nil 618 . 620) (nil fontified nil 616 . 618) (nil fontified nil 615 . 616) (nil fontified nil 613 . 615) (nil fontified nil 612 . 613) (nil fontified nil 610 . 612) (nil fontified nil 609 . 610) (nil fontified nil 607 . 609) (nil fontified nil 605 . 607) (nil fontified nil 603 . 605) (nil fontified nil 602 . 603) (nil fontified nil 600 . 602) (nil fontified nil 599 . 600) (nil fontified nil 597 . 599) (nil fontified nil 596 . 597) (nil fontified nil 594 . 596) (nil fontified nil 591 . 594) (nil fontified nil 589 . 591) (nil fontified nil 586 . 589) (nil fontified nil 584 . 586) (nil fontified nil 581 . 584) (nil fontified nil 579 . 581) (nil fontified nil 576 . 579) (nil fontified nil 570 . 576) (nil fontified nil 569 . 570) (nil fontified nil 568 . 569) (nil fontified nil 567 . 568) (nil fontified nil 561 . 567) (nil fontified nil 560 . 561) (nil fontified nil 558 . 560) (nil fontified nil 557 . 558) (nil fontified nil 556 . 557) (nil fontified nil 555 . 556) (nil fontified nil 537 . 555) (nil fontified nil 536 . 537) (nil fontified nil 535 . 536) (nil fontified nil 528 . 535) (nil fontified nil 527 . 528) (nil fontified nil 526 . 527) (nil fontified nil 525 . 526) (nil fontified nil 524 . 525) (nil fontified nil 507 . 524) (nil fontified nil 506 . 507) (nil fontified nil 498 . 506) (nil fontified nil 497 . 498) (nil fontified nil 496 . 497) (nil fontified nil 495 . 496) (nil fontified nil 494 . 495) (nil fontified nil 477 . 494) (477 . 702)) nil (25467 36825 416003 0) 0 nil])
([nil nil ((#("decodeValidHeader" 0 17 (ws-butler-chg chg fontified t face haskell-definition-face)) . -477) (undo-tree-id1300 . -17) 494) nil (25467 36825 415984 0) 0 nil])
([nil nil ((477 . 495)) nil (25467 36825 415981 0) 0 nil])
([nil nil ((#("decodeValidHeader" 0 17 (ws-butler-chg chg fontified t face haskell-definition-face)) . -508) (undo-tree-id1299 . -17) 525) nil (25467 36825 415980 0) 0 nil])
([nil nil ((508 . 523)) nil (25467 36825 415978 0) 0 nil])
([nil nil ((523 . 526)) nil (25467 36825 415977 0) 0 nil])
([nil nil ((#("decodeValidHeader" 0 17 (ws-butler-chg chg fontified t face font-lock-string-face)) . 539)) nil (25467 36825 415976 0) 0 nil])
([nil nil ((539 . 546)) nil (25467 36825 415975 0) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -545) (undo-tree-id1298 . -1) 546) nil (25467 36825 415974 0) 0 nil])
([nil nil ((545 . 557)) nil (25467 36825 415971 0) 0 nil])
([nil nil ((#("1" 0 1 (ws-butler-chg chg syntax-table (2) fontified t)) . -586) (undo-tree-id1297 . -1) 587) nil (25467 36825 415970 0) 0 nil])
([nil nil ((586 . 587)) nil (25467 36825 415968 0) 0 nil])
([nil nil ((563 . 577)) nil (25467 36825 415967 0) 0 nil])
([nil nil ((#("assertFailure " 0 14 (ws-butler-chg chg fontified t)) . -563) (undo-tree-id1296 . -14) 577) nil (25467 36825 415966 0) 0 nil])
([nil nil ((569 . 575)) nil (25467 36825 415963 0) 0 nil])
([nil nil ((637 . 640) (#(" " 0 1 (ws-butler-chg chg fontified t)) . 637) (undo-tree-id1295 . -1) 638) nil (25467 36825 415962 0) 0 nil])
([nil nil ((637 . 647)) nil (25467 36825 415959 0) 0 nil])
([nil nil ((647 . 661)) nil (25467 36825 415958 0) 0 nil])
([nil nil ((661 . 662)) nil (25467 36825 415957 0) 0 nil])
([nil nil ((662 . 670)) nil (25467 36825 415957 0) 0 nil])
([nil nil ((#("f" 0 1 (ws-butler-chg chg fontified t font-lock-multiline t haskell-type t face haskell-type-face)) . -669) (undo-tree-id1294 . -1) 670) nil (25467 36825 415955 0) 0 nil])
([nil nil ((669 . 673)) nil (25467 36825 415953 0) 0 nil])
([nil nil ((673 . 674)) nil (25467 36825 415952 0) 0 nil])
([nil nil ((674 . 681)) nil (25467 36825 415951 0) 0 nil])
([nil nil ((681 . 682)) nil (25467 36825 415950 0) 0 nil])
([nil nil ((682 . 696)) nil (25467 36825 415949 0) 0 nil])
([nil nil ((696 . 697)) nil (25467 36825 415948 0) 0 nil])
([nil nil ((697 . 708)) nil (25467 36825 415947 0) 0 nil])
([nil nil ((708 . 709)) nil (25467 36825 415946 0) 0 nil])
([nil nil ((709 . 716)) nil (25467 36825 415946 0) 0 nil])
([nil nil ((716 . 717)) nil (25467 36825 415945 0) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t font-lock-multiline t haskell-type t face haskell-type-face)) . 711)) nil (25467 36825 415944 0) 0 nil])
([nil nil ((711 . 713)) nil (25467 36825 415943 0) 0 nil])
([nil nil ((#("w" 0 1 (ws-butler-chg chg fontified t font-lock-multiline t haskell-type t face haskell-type-face)) . -712) (undo-tree-id1293 . -1) 713) nil (25467 36825 415941 0) 0 nil])
([nil nil ((717 . 718)) nil (25467 36825 415938 0) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t font-lock-multiline t haskell-type t)) . 718) (#(" " 0 1 (ws-butler-chg delete fontified t font-lock-multiline t haskell-type t)) . 718) (#("
" 0 1 (ws-butler-chg delete fontified t font-lock-multiline t haskell-type t)) . 718) (undo-tree-id1292 . -1)) nil (25467 36825 415936 0) 0 nil])
([nil nil ((724 . 730)) nil (25467 36825 415924 0) 0 nil])
([nil nil ((730 . 731)) nil (25467 36825 415923 0) 0 nil])
([nil nil ((#("Header {hWidth = 10, hHeight = 10, hChannels = 3, hColorspace = 0}" 0 1 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t font-lock-multiline t haskell-type t face haskell-type-face) 1 6 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t font-lock-multiline t haskell-type t face haskell-type-face) 6 8 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t font-lock-multiline t haskell-type t) 8 14 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t font-lock-multiline t haskell-type t) 14 15 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t) 15 16 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t syntax-table (1) face haskell-operator-face) 16 17 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t) 17 19 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t syntax-table (2)) 19 29 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t) 29 30 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t syntax-table (1) face haskell-operator-face) 30 31 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t) 31 33 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t syntax-table (2)) 33 45 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t) 45 46 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t syntax-table (1) face haskell-operator-face) 46 47 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t) 47 48 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t syntax-table (2)) 48 62 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t) 62 63 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t syntax-table (1) face haskell-operator-face) 63 64 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t) 64 65 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t syntax-table (2)) 65 66 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t)) . 731)) nil (25467 36825 416140 0) 0 nil])
([nil nil ((nil read-only t 741 . 768) (nil font-lock-face haskell-interactive-face-result 741 . 768) (nil fontified nil 741 . 768) (nil read-only t 731 . 741) (nil font-lock-face haskell-interactive-face-result 731 . 741) (nil fontified nil 731 . 741) (nil read-only t 730 . 731) (nil font-lock-face haskell-interactive-face-result 730 . 731) (nil fontified nil 730 . 731) (730 . 768)) nil (25467 36847 69328 0) 0 nil] [nil nil ((nil fontified nil 795 . 796) (nil fontified nil 794 . 795) (nil fontified nil 793 . 794) (nil fontified nil 792 . 793) (nil fontified nil 778 . 792) (nil fontified nil 777 . 778) (nil fontified nil 776 . 777) (nil fontified nil 775 . 776) (nil fontified nil 763 . 775) (nil fontified nil 761 . 763) (nil fontified nil 760 . 761) (nil fontified nil 759 . 760) (nil fontified nil 749 . 759) (nil fontified nil 747 . 749) (nil fontified nil 746 . 747) (nil fontified nil 745 . 746) (nil fontified nil 744 . 745) (nil fontified nil 738 . 744) (nil fontified nil 736 . 738) (nil fontified nil 731 . 736) (nil fontified nil 730 . 731) (730 . 796)) ((#("Header {hWidth = 10, hHeight = 10, hChannels = 3, hColorspace = 0}" 0 1 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil face haskell-constructor-face) 1 6 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil face haskell-constructor-face) 6 8 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil) 8 14 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil) 14 15 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil) 15 16 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil syntax-table (1) face haskell-operator-face) 16 17 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil) 17 19 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil syntax-table (2)) 19 29 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil) 29 30 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil syntax-table (1) face haskell-operator-face) 30 31 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil) 31 33 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil syntax-table (2)) 33 45 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil) 45 46 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil syntax-table (1) face haskell-operator-face) 46 47 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil) 47 48 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil syntax-table (2)) 48 62 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil) 62 63 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil syntax-table (1) face haskell-operator-face) 63 64 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil) 64 65 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil syntax-table (2)) 65 66 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified nil)) . 730) (undo-tree-id1304 . -66) (undo-tree-id1305 . -66) (undo-tree-id1306 . 1) (undo-tree-id1307 . -66) (undo-tree-id1308 . 59) (undo-tree-id1309 . -8) (nil fontified t 795 . 796)) (25467 36825 415914 0) 0 nil])
([nil nil ((768 . 769)) nil (25467 36847 69325 0) 0 nil])
nil
([nil nil ((769 . 771)) nil (25467 36847 69324 0) 0 nil])
([nil nil ((771 . 772)) nil (25467 36847 69323 0) 0 nil])
([nil nil ((772 . 775)) nil (25467 36847 69322 0) 0 nil])
([nil nil ((#("I" 0 1 (result t prompt t ws-butler-chg chg fontified t rear-nonsticky (prompt result) front-sticky (prompt result) face font-lock-string-face)) . -774) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) 775) nil (25467 36847 69318 0) 0 nil])
([nil nil ((774 . 793)) nil (25467 36847 69248 0) 0 nil])
([nil nil ((793 . 794)) nil (25467 36847 69242 0) 0 nil])
([nil nil ((247 . 248) (t 25467 36847 75933 477000)) nil (25467 36859 542079 0) 0 nil])
([nil nil ((248 . 251) (#(" " 0 1 (fontified t)) . 248) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1)) nil (25467 36859 542076 0) 0 nil])
([nil nil ((251 . 253)) nil (25467 36859 542054 0) 0 nil])
([nil nil ((253 . 271)) nil (25467 36859 542053 0) 0 nil])
([nil nil ((271 . 274)) nil (25467 36859 542048 0) 0 nil])
([nil nil ((229 . 234) (#(" " 0 1 (fontified t)) . 229) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) 230 (t 25467 36859 548542 527000)) nil (25467 36861 582284 0) 0 nil])
([nil nil ((#(")" 0 1 (result t prompt t rear-nonsticky (face prompt result) front-sticky (face prompt result) fontified t)) . -824) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . 1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) 825 (t 25467 36861 588429 864000)) nil (25467 36872 246359 0) 0 nil])
([nil nil ((81 . 82) (t 25467 36872 252848 732000)) nil (25467 36896 793787 0) 0 nil])
([nil nil ((82 . 100)) nil (25467 36896 793781 0) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face haskell-definition-face)) . -571) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) 572 (t 25467 36896 800612 92000)) nil (25467 36930 956628 0) 0 nil])
([nil nil ((571 . 572)) nil (25467 36930 956572 0) 0 nil])
([nil nil ((81 . 82) (t 25467 36930 962811 593000)) nil (25467 36956 524794 0) 0 nil])
([nil nil ((82 . 103)) nil (25467 36956 524793 0) 0 nil])
([nil nil ((103 . 104)) nil (25467 36956 524790 0) 0 nil])
([nil nil ((104 . 105)) nil (25467 36956 524784 0) 0 nil])
([nil nil ((790 . 793) (#(" " 0 1 (fontified t font-lock-multiline t haskell-type t)) . 790) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) 791 (t 25467 36956 531137 383000)) nil (25467 37007 983383 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg delete font-lock-multiline t haskell-type t)) . 796) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (#(" " 0 1 (fontified t ws-butler-chg delete font-lock-multiline t haskell-type t)) . 796) (#("
" 0 1 (fontified t font-lock-multiline t haskell-type t)) . 796) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1)) nil (25467 37007 983260 0) 0 nil])
([nil nil ((796 . 797)) nil (25467 37007 983221 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -709) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . 1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) 710 (t 25467 37007 988315 626000)) nil (25467 37063 535029 0) 0 nil])
([nil nil ((709 . 711)) nil (25467 37063 535010 0) 0 nil])
([nil nil ((711 . 713)) nil (25467 37063 535009 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg)) . -709) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (#(":" 0 1 (fontified t ws-butler-chg chg syntax-table (1) face haskell-constructor-face)) . -710) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (#(":" 0 1 (fontified t ws-butler-chg chg syntax-table (1) face haskell-operator-face)) . -711) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg font-lock-multiline t haskell-type t)) . -712) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) 713) nil (25467 37063 534995 0) 0 nil])
([nil nil ((709 . 710)) nil (25467 37063 534611 0) 0 nil])
([nil nil ((790 . 791)) nil (25467 37063 534609 0) 0 nil])
([nil nil ((636 . 637)) nil (25467 37063 534604 0) 0 nil])
([nil nil ((#("import Data.Either
" 0 6 (fontified t face haskell-keyword-face) 6 7 (fontified t) 7 18 (fontified t face haskell-constructor-face) 18 19 (fontified t)) . 106) (undo-tree-id1853 . -19) (undo-tree-id1854 . -19) (undo-tree-id1855 . -19) (undo-tree-id1856 . -19) (undo-tree-id1857 . -19) (undo-tree-id1858 . -19) (undo-tree-id1859 . -19) (undo-tree-id1860 . -19) (undo-tree-id1861 . -18) (undo-tree-id1862 . -18) (undo-tree-id1863 . -18) (undo-tree-id1864 . -18) (undo-tree-id1865 . -18) (undo-tree-id1866 . -18) (t 25467 37063 541181 389000)) nil (25467 37244 181994 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 852) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (851 . 852) (#("
" 0 1 (rear-nonsticky t fontified t)) . 850) (851 . 852) 852 (t 25467 37244 188001 720000)) nil (25467 37391 375084 0) 0 nil])
([nil nil ((nil fontified nil 1171 . 1172) (nil fontified nil 1170 . 1171) (nil fontified nil 1169 . 1170) (nil fontified nil 1168 . 1169) (nil fontified nil 1167 . 1168) (nil fontified nil 1166 . 1167) (nil fontified nil 1165 . 1166) (nil fontified nil 1164 . 1165) (nil fontified nil 1163 . 1164) (nil fontified nil 1162 . 1163) (nil fontified nil 1161 . 1162) (nil fontified nil 1160 . 1161) (nil fontified nil 1159 . 1160) (nil fontified nil 1158 . 1159) (nil fontified nil 1157 . 1158) (nil fontified nil 1156 . 1157) (nil fontified nil 1155 . 1156) (nil fontified nil 1154 . 1155) (nil fontified nil 1153 . 1154) (nil fontified nil 1152 . 1153) (nil fontified nil 1151 . 1152) (nil fontified nil 1150 . 1151) (nil fontified nil 1149 . 1150) (nil fontified nil 1148 . 1149) (nil fontified nil 1147 . 1148) (nil fontified nil 1146 . 1147) (nil fontified nil 1145 . 1146) (nil fontified nil 1118 . 1145) (nil fontified nil 1108 . 1118) (nil fontified nil 1107 . 1108) (nil fontified nil 1106 . 1107) (nil fontified nil 1105 . 1106) (nil fontified nil 1104 . 1105) (nil fontified nil 1103 . 1104) (nil fontified nil 1102 . 1103) (nil fontified nil 1101 . 1102) (nil fontified nil 1100 . 1101) (nil fontified nil 1099 . 1100) (nil fontified nil 1098 . 1099) (nil fontified nil 1097 . 1098) (nil fontified nil 1095 . 1097) (nil fontified nil 1094 . 1095) (nil fontified nil 1093 . 1094) (nil fontified nil 1092 . 1093) (nil fontified nil 1089 . 1092) (nil fontified nil 1088 . 1089) (nil fontified nil 1086 . 1088) (nil fontified nil 1084 . 1086) (nil fontified nil 1074 . 1084) (nil fontified nil 1072 . 1074) (nil fontified nil 1060 . 1072) (nil fontified nil 1057 . 1060) (nil fontified nil 1051 . 1057) (nil fontified nil 1049 . 1051) (nil fontified nil 1039 . 1049) (nil fontified nil 1037 . 1039) (nil fontified nil 1025 . 1037) (nil fontified nil 1023 . 1025) (nil fontified nil 1017 . 1023) (nil fontified nil 1016 . 1017) (nil fontified nil 1015 . 1016) (nil fontified nil 1014 . 1015) (nil fontified nil 1013 . 1014) (nil fontified nil 1012 . 1013) (nil fontified nil 1011 . 1012) (nil fontified nil 1010 . 1011) (nil fontified nil 1008 . 1010) (nil fontified nil 1007 . 1008) (nil fontified nil 1005 . 1007) (nil fontified nil 1003 . 1005) (nil fontified nil 1001 . 1003) (nil fontified nil 1000 . 1001) (nil fontified nil 998 . 1000) (nil fontified nil 997 . 998) (nil fontified nil 995 . 997) (nil fontified nil 994 . 995) (nil fontified nil 992 . 994) (nil fontified nil 990 . 992) (nil fontified nil 988 . 990) (nil fontified nil 987 . 988) (nil fontified nil 985 . 987) (nil fontified nil 984 . 985) (nil fontified nil 982 . 984) (nil fontified nil 981 . 982) (nil fontified nil 979 . 981) (nil fontified nil 976 . 979) (nil fontified nil 974 . 976) (nil fontified nil 971 . 974) (nil fontified nil 970 . 971) (nil fontified nil 969 . 970) (nil fontified nil 968 . 969) (nil fontified nil 966 . 968) (nil fontified nil 964 . 966) (nil fontified nil 961 . 964) (nil fontified nil 955 . 961) (nil fontified nil 954 . 955) (nil fontified nil 953 . 954) (nil fontified nil 952 . 953) (nil fontified nil 940 . 952) (nil fontified nil 939 . 940) (nil fontified nil 938 . 939) (nil fontified nil 936 . 938) (nil fontified nil 935 . 936) (nil fontified nil 934 . 935) (nil fontified nil 933 . 934) (nil fontified nil 932 . 933) (nil fontified nil 913 . 932) (nil fontified nil 912 . 913) (nil fontified nil 905 . 912) (nil fontified nil 904 . 905) (nil fontified nil 903 . 904) (nil fontified nil 902 . 903) (nil fontified nil 901 . 902) (nil fontified nil 899 . 901) (nil fontified nil 898 . 899) (nil fontified nil 897 . 898) (nil fontified nil 883 . 897) (nil fontified nil 882 . 883) (nil fontified nil 874 . 882) (nil fontified nil 873 . 874) (nil fontified nil 872 . 873) (nil fontified nil 871 . 872) (nil fontified nil 870 . 871) (nil fontified nil 852 . 870) (852 . 1172)) nil (25467 37391 375070 0) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -865) (undo-tree-id2151 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -866) (undo-tree-id2152 . -1) (#("g" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -867) (undo-tree-id2153 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -868) (undo-tree-id2154 . -1) (#("c" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -869) (undo-tree-id2155 . -1) 870) nil (25467 37391 375046 0) 0 nil])
([nil nil ((865 . 873)) nil (25467 37391 375039 0) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -872) (undo-tree-id2150 . -1) 873) nil (25467 37391 375038 0) 0 nil])
([nil nil ((#("c" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . 865)) nil (25467 37391 375035 0) 0 nil])
([nil nil ((865 . 866)) nil (25467 37391 375034 0) 0 nil])
([nil nil ((872 . 873)) nil (25467 37391 375034 0) 0 nil])
([nil nil ((#("decodeInvalidMagic" 0 14 (ws-butler-chg chg fontified t face haskell-definition-face) 14 15 (ws-butler-chg chg fontified t face haskell-definition-face) 15 16 (ws-butler-chg chg fontified t face haskell-definition-face) 16 18 (ws-butler-chg chg fontified t face haskell-definition-face)) . -886) (undo-tree-id2148 . -18) (undo-tree-id2149 . -18)) nil (25467 37391 375032 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 906 . 907) (nil fontified nil 901 . 907) (nil fontified nil 900 . 901) (nil fontified nil 886 . 900) (886 . 907)) nil (25467 37391 375029 0) 0 nil])
([nil nil ((#("2" 0 1 (ws-butler-chg chg syntax-table (2) fontified t)) . -974) (undo-tree-id2147 . -1) 975) nil (25467 37391 375028 0) 0 nil])
([nil nil ((974 . 975)) nil (25467 37391 375025 0) 0 nil])
([nil nil ((#("3" 0 1 (ws-butler-chg chg fontified t syntax-table (2))) . -1013) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) 1014) nil (25467 37391 375020 0) 0 nil])
([nil nil ((1013 . 1014)) nil (25467 37391 374889 0) 0 nil])
([nil nil ((#("\\NUL\\NUL\\NUL\\n\\NUL\\NUL\\NUL\\n\\ETX" 0 10 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t face font-lock-string-face) 10 32 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t face font-lock-string-face)) . -1114) (undo-tree-id1881 . -32) (undo-tree-id1882 . -5) (undo-tree-id1883 . -5) (undo-tree-id1884 . -5) (undo-tree-id1885 . -5) (undo-tree-id1886 . -5) (undo-tree-id1887 . -5) (undo-tree-id1888 . -5) (undo-tree-id1889 . -4) (undo-tree-id1890 . -5) (undo-tree-id1891 . -4) (undo-tree-id1892 . -4) (undo-tree-id1893 . -4) (undo-tree-id1894 . -4) (undo-tree-id1895 . -4) (undo-tree-id1896 . -4) (undo-tree-id1897 . -3) (undo-tree-id1898 . -4) (undo-tree-id1899 . -3) (undo-tree-id1900 . -3) (undo-tree-id1901 . -3) (undo-tree-id1902 . -3) (undo-tree-id1903 . -3) (undo-tree-id1904 . -3) (undo-tree-id1905 . -2) (undo-tree-id1906 . -3) (undo-tree-id1907 . -2) (undo-tree-id1908 . -2) (undo-tree-id1909 . -2) (undo-tree-id1910 . -2) (undo-tree-id1911 . -2) (undo-tree-id1912 . -2) (undo-tree-id1913 . -1) (undo-tree-id1914 . -2) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -32) (undo-tree-id1923 . -4) (undo-tree-id1924 . -4) (undo-tree-id1925 . -4) (undo-tree-id1926 . -4) (undo-tree-id1927 . -4) (undo-tree-id1928 . -4) (undo-tree-id1929 . -4) (undo-tree-id1930 . -8) (undo-tree-id1931 . -4) (undo-tree-id1932 . -8) (undo-tree-id1933 . -8) (undo-tree-id1934 . -8) (undo-tree-id1935 . -8) (undo-tree-id1936 . -8) (undo-tree-id1937 . -8) (undo-tree-id1938 . -12) (undo-tree-id1939 . -8) (undo-tree-id1940 . -12) (undo-tree-id1941 . -12) (undo-tree-id1942 . -12) (undo-tree-id1943 . -12) (undo-tree-id1944 . -12) (undo-tree-id1945 . -12) (undo-tree-id1946 . -14) (undo-tree-id1947 . -12) (undo-tree-id1948 . -14) (undo-tree-id1949 . -14) (undo-tree-id1950 . -14) (undo-tree-id1951 . -14) (undo-tree-id1952 . -14) (undo-tree-id1953 . -14) (undo-tree-id1954 . -18) (undo-tree-id1955 . -14) (undo-tree-id1956 . -18) (undo-tree-id1957 . -18) (undo-tree-id1958 . -18) (undo-tree-id1959 . -18) (undo-tree-id1960 . -18) (undo-tree-id1961 . -18) (undo-tree-id1962 . -22) (undo-tree-id1963 . -18) (undo-tree-id1964 . -22) (undo-tree-id1965 . -22) (undo-tree-id1966 . -22) (undo-tree-id1967 . -22) (undo-tree-id1968 . -22) (undo-tree-id1969 . -22) (undo-tree-id1970 . -26) (undo-tree-id1971 . -22) (undo-tree-id1972 . -26) (undo-tree-id1973 . -26) (undo-tree-id1974 . -26) (undo-tree-id1975 . -26) (undo-tree-id1976 . -26) (undo-tree-id1977 . -26) (undo-tree-id1978 . -28) (undo-tree-id1979 . -26) (undo-tree-id1980 . -28) (undo-tree-id1981 . -28) (undo-tree-id1982 . -28) (undo-tree-id1983 . -28) (undo-tree-id1984 . -28) (undo-tree-id1985 . -28) (undo-tree-id1986 . -29) (undo-tree-id1987 . -28) (undo-tree-id1988 . -29) (undo-tree-id1989 . -29) (undo-tree-id1990 . -29) (undo-tree-id1991 . -29) (undo-tree-id1992 . -29) (undo-tree-id1993 . -29) (undo-tree-id1994 . -30) (undo-tree-id1995 . -29) (undo-tree-id1996 . -30) (undo-tree-id1997 . -30) (undo-tree-id1998 . -30) (undo-tree-id1999 . -30) (undo-tree-id2000 . -30) (undo-tree-id2001 . -30) (undo-tree-id2002 . -31) (undo-tree-id2003 . -30) (undo-tree-id2004 . -31) (undo-tree-id2005 . -31) (undo-tree-id2006 . -31) (undo-tree-id2007 . -31) (undo-tree-id2008 . -31) (undo-tree-id2009 . -31) (undo-tree-id2010 . -32) (undo-tree-id2011 . -31) (undo-tree-id2012 . -32) (undo-tree-id2013 . -32) (undo-tree-id2014 . -32) (undo-tree-id2015 . -32) (undo-tree-id2016 . -32) (undo-tree-id2017 . -32) (undo-tree-id2018 . -32) (undo-tree-id2019 . -32) (undo-tree-id2020 . -32) (undo-tree-id2021 . -32) (undo-tree-id2022 . -32) (undo-tree-id2023 . -32) (undo-tree-id2024 . -32) (undo-tree-id2025 . -32) 1146) nil (25467 37391 374883 0) 0 nil])
([nil nil ((#("4" 0 1 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) ws-butler-chg chg fontified t syntax-table (2))) . -1121) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) 1122) nil (25467 37391 374726 0) 0 nil])
([nil nil ((1121 . 1123)) nil (25467 37391 374695 0) 0 nil])
([nil nil ((#("Invalid magic word" 0 1 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 1 2 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 2 3 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 3 4 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 4 5 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 5 6 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 6 7 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 7 8 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 8 9 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 9 10 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 10 11 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 11 12 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 12 13 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 13 14 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 14 15 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 15 16 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 16 17 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 17 18 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face)) . -1126) (undo-tree-id2302 . -18) (undo-tree-id2303 . -18) 1139 (t 25467 37391 382240 767000)) nil (25467 37441 199246 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1155 . 1156) (nil fontified nil 1126 . 1156) (1126 . 1156)) nil (25467 37441 199242 0) 0 nil])
([nil nil ((1159 . 1160)) nil (25467 37441 199240 0) 0 nil])
([nil nil ((nil fontified nil 1466 . 1467) (nil fontified nil 1465 . 1466) (nil fontified nil 1464 . 1465) (nil fontified nil 1463 . 1464) (nil fontified nil 1434 . 1463) (nil fontified nil 1433 . 1434) (nil fontified nil 1432 . 1433) (nil fontified nil 1431 . 1432) (nil fontified nil 1430 . 1431) (nil fontified nil 1429 . 1430) (nil fontified nil 1428 . 1429) (nil fontified nil 1427 . 1428) (nil fontified nil 1423 . 1427) (nil fontified nil 1422 . 1423) (nil fontified nil 1421 . 1422) (nil fontified nil 1420 . 1421) (nil fontified nil 1419 . 1420) (nil fontified nil 1418 . 1419) (nil fontified nil 1417 . 1418) (nil fontified nil 1416 . 1417) (nil fontified nil 1415 . 1416) (nil fontified nil 1414 . 1415) (nil fontified nil 1413 . 1414) (nil fontified nil 1412 . 1413) (nil fontified nil 1411 . 1412) (nil fontified nil 1409 . 1411) (nil fontified nil 1408 . 1409) (nil fontified nil 1407 . 1408) (nil fontified nil 1406 . 1407) (nil fontified nil 1403 . 1406) (nil fontified nil 1402 . 1403) (nil fontified nil 1400 . 1402) (nil fontified nil 1398 . 1400) (nil fontified nil 1388 . 1398) (nil fontified nil 1386 . 1388) (nil fontified nil 1374 . 1386) (nil fontified nil 1371 . 1374) (nil fontified nil 1365 . 1371) (nil fontified nil 1363 . 1365) (nil fontified nil 1353 . 1363) (nil fontified nil 1351 . 1353) (nil fontified nil 1339 . 1351) (nil fontified nil 1337 . 1339) (nil fontified nil 1331 . 1337) (nil fontified nil 1330 . 1331) (nil fontified nil 1329 . 1330) (nil fontified nil 1328 . 1329) (nil fontified nil 1327 . 1328) (nil fontified nil 1326 . 1327) (nil fontified nil 1325 . 1326) (nil fontified nil 1324 . 1325) (nil fontified nil 1323 . 1324) (nil fontified nil 1322 . 1323) (nil fontified nil 1321 . 1322) (nil fontified nil 1319 . 1321) (nil fontified nil 1317 . 1319) (nil fontified nil 1315 . 1317) (nil fontified nil 1314 . 1315) (nil fontified nil 1312 . 1314) (nil fontified nil 1311 . 1312) (nil fontified nil 1309 . 1311) (nil fontified nil 1308 . 1309) (nil fontified nil 1306 . 1308) (nil fontified nil 1304 . 1306) (nil fontified nil 1302 . 1304) (nil fontified nil 1301 . 1302) (nil fontified nil 1299 . 1301) (nil fontified nil 1298 . 1299) (nil fontified nil 1296 . 1298) (nil fontified nil 1295 . 1296) (nil fontified nil 1293 . 1295) (nil fontified nil 1290 . 1293) (nil fontified nil 1288 . 1290) (nil fontified nil 1285 . 1288) (nil fontified nil 1284 . 1285) (nil fontified nil 1283 . 1284) (nil fontified nil 1282 . 1283) (nil fontified nil 1280 . 1282) (nil fontified nil 1278 . 1280) (nil fontified nil 1275 . 1278) (nil fontified nil 1269 . 1275) (nil fontified nil 1268 . 1269) (nil fontified nil 1267 . 1268) (nil fontified nil 1266 . 1267) (nil fontified nil 1254 . 1266) (nil fontified nil 1253 . 1254) (nil fontified nil 1252 . 1253) (nil fontified nil 1250 . 1252) (nil fontified nil 1249 . 1250) (nil fontified nil 1248 . 1249) (nil fontified nil 1247 . 1248) (nil fontified nil 1246 . 1247) (nil fontified nil 1227 . 1246) (nil fontified nil 1226 . 1227) (nil fontified nil 1219 . 1226) (nil fontified nil 1218 . 1219) (nil fontified nil 1217 . 1218) (nil fontified nil 1216 . 1217) (nil fontified nil 1215 . 1216) (nil fontified nil 1214 . 1215) (nil fontified nil 1209 . 1214) (nil fontified nil 1208 . 1209) (nil fontified nil 1194 . 1208) (nil fontified nil 1193 . 1194) (nil fontified nil 1185 . 1193) (nil fontified nil 1184 . 1185) (nil fontified nil 1183 . 1184) (nil fontified nil 1182 . 1183) (nil fontified nil 1181 . 1182) (nil fontified nil 1175 . 1181) (nil fontified nil 1174 . 1175) (nil fontified nil 1160 . 1174) (1160 . 1467)) nil (25467 37441 199235 0) 0 nil])
([nil nil ((#("h" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -1174) (undo-tree-id2295 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -1175) (undo-tree-id2296 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -1176) (undo-tree-id2297 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -1177) (undo-tree-id2298 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -1178) (undo-tree-id2299 . -1) (#("l" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -1179) (undo-tree-id2300 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t face haskell-definition-face)) . -1180) (undo-tree-id2301 . -1) 1181) nil (25467 37441 199208 0) 0 nil])
([nil nil ((1174 . 1182)) nil (25467 37441 199196 0) 0 nil])
([nil nil ((1182 . 1183)) nil (25467 37441 199195 0) 0 nil])
([nil nil ((#("decodeInvalidChannels" 0 14 (ws-butler-chg chg fontified t face haskell-definition-face) 14 15 (ws-butler-chg chg fontified t face haskell-definition-face) 15 20 (ws-butler-chg chg fontified t face haskell-definition-face) 20 21 (rear-nonsticky t ws-butler-chg chg fontified t face haskell-definition-face)) . -1196) (undo-tree-id2293 . -21) (undo-tree-id2294 . -21)) nil (25467 37441 199194 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1218 . 1219) (nil fontified nil 1196 . 1219) (1196 . 1219)) nil (25467 37441 199190 0) 0 nil])
([nil nil ((#("1" 0 1 (ws-butler-chg chg syntax-table (2) fontified t)) . -1325) (undo-tree-id2292 . -1) 1326) nil (25467 37441 199188 0) 0 nil])
([nil nil ((1325 . 1326)) nil (25467 37441 199185 0) 0 nil])
([nil nil ((#("0" 0 1 (ws-butler-chg chg fontified t syntax-table (2))) . -1328) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) 1329) nil (25467 37441 199183 0) 0 nil])
([nil nil ((1328 . 1329)) nil (25467 37441 199157 0) 0 nil])
([nil nil ((#("L" 0 1 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg delete fontified t face font-lock-string-face)) . 1426) (#("U" 0 1 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg delete fontified t face font-lock-string-face)) . 1426) (#("N" 0 1 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg delete fontified t face font-lock-string-face)) . 1426) (#("\\" 0 1 (result t rear-nonsticky t prompt t front-sticky t ws-butler-chg chg fontified t face font-lock-string-face)) . 1426) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1)) nil (25467 37441 199155 0) 0 nil])
([nil nil ((#("3" 0 1 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) ws-butler-chg chg fontified t syntax-table (2))) . -1430) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) 1431) nil (25467 37441 199142 0) 0 nil])
([nil nil ((1430 . 1431)) nil (25467 37441 199114 0) 0 nil])
([nil nil ((#("Invalid channel byte in header" 0 29 (ws-butler-chg chg fontified t face font-lock-string-face) 29 30 (ws-butler-chg chg rear-nonsticky t fontified t face font-lock-string-face)) . -1434) (undo-tree-id2164 . -7) (undo-tree-id2165 . -30) (undo-tree-id2166 . -7) (undo-tree-id2167 . -7) (undo-tree-id2168 . -7) (undo-tree-id2169 . -7) (undo-tree-id2170 . -7) (undo-tree-id2171 . -7) (undo-tree-id2172 . -7) (undo-tree-id2173 . -7) (undo-tree-id2174 . -7) (undo-tree-id2175 . -7) (undo-tree-id2176 . -7) (undo-tree-id2177 . -7) (undo-tree-id2178 . -7) (undo-tree-id2179 . -7) (undo-tree-id2180 . -7) (undo-tree-id2181 . -7) (undo-tree-id2182 . -7) (undo-tree-id2183 . -7) (undo-tree-id2184 . -7) (undo-tree-id2185 . -7) (undo-tree-id2186 . -7) (undo-tree-id2187 . -7) (undo-tree-id2188 . -7) (undo-tree-id2189 . -7) (undo-tree-id2190 . -30) (undo-tree-id2191 . -7) (undo-tree-id2192 . -7) (undo-tree-id2193 . -7) (undo-tree-id2194 . -7) (undo-tree-id2195 . -7) (undo-tree-id2196 . -7) (undo-tree-id2197 . -7) (undo-tree-id2198 . -7) (undo-tree-id2199 . -7) (undo-tree-id2200 . -7) (undo-tree-id2201 . -7) (undo-tree-id2202 . -7) (undo-tree-id2203 . -7) (undo-tree-id2204 . -7) (undo-tree-id2205 . -7) (undo-tree-id2206 . -30) (undo-tree-id2207 . -7) (undo-tree-id2208 . -7) (undo-tree-id2209 . -7) (undo-tree-id2210 . -7) (undo-tree-id2211 . -7) (undo-tree-id2212 . -7) (undo-tree-id2213 . -7) (undo-tree-id2214 . -15) (undo-tree-id2215 . -7) (undo-tree-id2216 . -15) (undo-tree-id2217 . -15) (undo-tree-id2218 . -15) (undo-tree-id2219 . -15) (undo-tree-id2220 . -15) (undo-tree-id2221 . -15) (undo-tree-id2222 . -20) (undo-tree-id2223 . -15) (undo-tree-id2224 . -20) (undo-tree-id2225 . -20) (undo-tree-id2226 . -20) (undo-tree-id2227 . -20) (undo-tree-id2228 . -20) (undo-tree-id2229 . -20) (undo-tree-id2230 . -23) (undo-tree-id2231 . -20) (undo-tree-id2232 . -23) (undo-tree-id2233 . -23) (undo-tree-id2234 . -23) (undo-tree-id2235 . -23) (undo-tree-id2236 . -23) (undo-tree-id2237 . -23) (undo-tree-id2238 . -30) (undo-tree-id2239 . -23) (undo-tree-id2240 . -30) (undo-tree-id2241 . -30) (undo-tree-id2242 . -30) (undo-tree-id2243 . -30) (undo-tree-id2244 . -30) (undo-tree-id2245 . -30) 1457) nil (25467 37441 199108 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1466 . 1467) (nil fontified nil 1434 . 1467) (1434 . 1467)) nil (25467 37441 198978 0) 0 nil])
([nil nil ((299 . 300) (t 25467 37441 207715 724000)) nil (25467 37456 403972 0) 0 nil])
([nil nil ((300 . 305)) nil (25467 37456 403971 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 325 . 326) (nil fontified nil 320 . 326) (nil fontified nil 319 . 320) (nil fontified nil 305 . 319) (305 . 326)) nil (25467 37456 403969 0) 0 nil])
([nil nil ((326 . 327)) nil (25467 37456 403967 0) 0 nil])
([nil nil ((327 . 332)) nil (25467 37456 403966 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 354 . 355) (nil fontified nil 332 . 355) (332 . 355)) nil (25467 37456 403964 0) 0 nil])
([nil nil ((355 . 356)) nil (25467 37456 403957 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -355) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) 356 (t 25467 37456 411913 745000)) nil (25467 37469 420643 0) 0 nil])
([nil nil ((#("decodeInvalidMagic" 0 18 (fontified t face font-lock-string-face)) . -976) (undo-tree-id2353 . -18) (undo-tree-id2354 . -18) (undo-tree-id2355 . -18) (undo-tree-id2356 . -18) (undo-tree-id2357 . -18) (undo-tree-id2358 . -18) (undo-tree-id2359 . -18) (undo-tree-id2360 . -18) (undo-tree-id2361 . -18) (undo-tree-id2362 . -18) (undo-tree-id2363 . -18) (undo-tree-id2364 . -18) (undo-tree-id2365 . -18) (undo-tree-id2366 . -18) (undo-tree-id2367 . -18) (undo-tree-id2368 . -18) (undo-tree-id2369 . -18) (undo-tree-id2370 . -18) (undo-tree-id2371 . -18) (undo-tree-id2372 . -18) (undo-tree-id2373 . -18) (undo-tree-id2374 . -18) (undo-tree-id2375 . -18) (undo-tree-id2376 . -18) (undo-tree-id2377 . -18) (t 25467 37469 427653 717000)) nil (25467 37546 127282 0) 0 nil])
([nil nil ((nil fontified nil 996 . 997) (nil fontified nil 991 . 996) (nil fontified nil 990 . 991) (nil fontified nil 976 . 990) (976 . 997)) nil (25467 37546 127253 0) 0 nil])
([nil nil ((#("decodeInvalidMagic" 0 18 (fontified t face font-lock-string-face)) . 1291) (undo-tree-id2334 . -18) (undo-tree-id2335 . -18) (undo-tree-id2336 . -18) (undo-tree-id2337 . -18) (undo-tree-id2338 . -18) (undo-tree-id2339 . -18) (undo-tree-id2340 . -18) (undo-tree-id2341 . -18) (undo-tree-id2342 . -18) (undo-tree-id2343 . -18) (undo-tree-id2344 . -18) (undo-tree-id2345 . -18) (undo-tree-id2346 . -18) (undo-tree-id2347 . -18) (undo-tree-id2348 . -18) (undo-tree-id2349 . -18) (undo-tree-id2350 . -18) (undo-tree-id2351 . -18) (undo-tree-id2352 . -18) 1309) nil (25467 37546 127250 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1313 . 1314) (nil fontified nil 1291 . 1314) (1291 . 1314)) nil (25467 37546 127214 0) 0 nil])
([nil nil ((#("3" 0 1 (result t rear-nonsticky t prompt t front-sticky t syntax-table (2) fontified t)) . -566) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) 567 (t 25467 37546 134798 479000)) nil (25467 37738 614876 0) 0 nil])
([nil nil ((566 . 569)) nil (25467 37738 614766 0) 0 nil])
([nil nil ((#("0" 0 1 (result t rear-nonsticky t prompt t front-sticky t fontified t syntax-table (2))) . -585) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) 586) nil (25467 37738 614762 0) 0 nil])
([nil nil ((585 . 594)) nil (25467 37738 614715 0) 0 nil])
([nil nil ((1544 . 1545) (t 25467 37738 623118 216000)) nil (25467 41874 322681 0) 0 nil])
([nil nil ((1545 . 1551)) nil (25467 41874 322680 0) 0 nil])
([nil nil ((1551 . 1557)) nil (25467 41874 322680 0) 0 nil])
([nil nil ((#("E" 0 1 (fontified t ws-butler-chg chg)) . -1552) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -1553) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg)) . -1554) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -1555) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -1556) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) 1557) nil (25467 41874 322671 0) 0 nil])
([nil nil ((1552 . 1555)) nil (25467 41874 322439 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t ws-butler-chg chg)) . -1553) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg)) . -1554) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) 1555) nil (25467 41874 322437 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t ws-butler-chg chg)) . -1552) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) 1553) nil (25467 41874 322397 0) 0 nil])
([nil current ((#("encodeH" 0 7 (fontified t ws-butler-chg chg)) . -1545) (undo-tree-id2847 . -7) (undo-tree-id2848 . -7) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -2) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -2) (undo-tree-id2861 . -2) (undo-tree-id2862 . -2) (undo-tree-id2863 . -2) (undo-tree-id2864 . -2) (undo-tree-id2865 . -2) (undo-tree-id2866 . -3) (undo-tree-id2867 . -2) (undo-tree-id2868 . -1) (undo-tree-id2869 . -3) (undo-tree-id2870 . -3) (undo-tree-id2871 . -3) (undo-tree-id2872 . -3) (undo-tree-id2873 . -3) (undo-tree-id2874 . -3) (undo-tree-id2875 . -4) (undo-tree-id2876 . -3) (undo-tree-id2877 . -1) (undo-tree-id2878 . -4) (undo-tree-id2879 . -4) (undo-tree-id2880 . -4) (undo-tree-id2881 . -4) (undo-tree-id2882 . -4) (undo-tree-id2883 . -4) (undo-tree-id2884 . -5) (undo-tree-id2885 . -4) (undo-tree-id2886 . -1) (undo-tree-id2887 . -5) (undo-tree-id2888 . -5) (undo-tree-id2889 . -5) (undo-tree-id2890 . -5) (undo-tree-id2891 . -5) (undo-tree-id2892 . -5) (undo-tree-id2893 . -6) (undo-tree-id2894 . -5) (undo-tree-id2895 . -1) (undo-tree-id2896 . -6) (undo-tree-id2897 . -6) (undo-tree-id2898 . -6) (undo-tree-id2899 . -6) (undo-tree-id2900 . -6) (undo-tree-id2901 . -6) (undo-tree-id2902 . -7) (undo-tree-id2903 . -6) (undo-tree-id2904 . -1) (undo-tree-id2905 . -7) (undo-tree-id2906 . -7) (undo-tree-id2907 . -7) (undo-tree-id2908 . -7) (undo-tree-id2909 . -7) (undo-tree-id2910 . -7) (undo-tree-id2911 . -7) (undo-tree-id2912 . -7) (undo-tree-id2913 . -1) (undo-tree-id2914 . -7) (undo-tree-id2915 . -7) (undo-tree-id2916 . -7) (undo-tree-id2917 . -7) (undo-tree-id2918 . -7) (undo-tree-id2919 . -7) (undo-tree-id2920 . -7) (undo-tree-id2921 . -7) (undo-tree-id2922 . -1) (undo-tree-id2923 . -7) (undo-tree-id2924 . -7) (undo-tree-id2925 . -7) (undo-tree-id2926 . -7) (undo-tree-id2927 . -7) (undo-tree-id2928 . -7) (undo-tree-id2929 . -7) (undo-tree-id2930 . -7) (undo-tree-id2931 . -7) (undo-tree-id2932 . -7) (undo-tree-id2933 . -7) (undo-tree-id2934 . -7) (undo-tree-id2935 . -7) (undo-tree-id2936 . -7) (undo-tree-id2937 . -7) (undo-tree-id2938 . -1) (undo-tree-id2939 . -7) (undo-tree-id2940 . -7) (undo-tree-id2941 . -7) (undo-tree-id2942 . -7) (undo-tree-id2943 . -7) (undo-tree-id2944 . -7) (undo-tree-id2945 . -7) (undo-tree-id2946 . -7) (undo-tree-id2947 . -1) (undo-tree-id2948 . -7) (undo-tree-id2949 . -7) (undo-tree-id2950 . -7) (undo-tree-id2951 . -7) (undo-tree-id2952 . -7) (undo-tree-id2953 . -7) (undo-tree-id2954 . -7) (undo-tree-id2955 . -7) (undo-tree-id2956 . -1) (undo-tree-id2957 . -7) (undo-tree-id2958 . -7) (undo-tree-id2959 . -7) (undo-tree-id2960 . -7) (undo-tree-id2961 . -7) (undo-tree-id2962 . -7) (undo-tree-id2963 . -7) (undo-tree-id2964 . -7) (undo-tree-id2965 . -1) (undo-tree-id2966 . -7) (undo-tree-id2967 . -7) (undo-tree-id2968 . -7) (undo-tree-id2969 . -7) (undo-tree-id2970 . -7) (undo-tree-id2971 . -7) (undo-tree-id2972 . -7) (undo-tree-id2973 . -7) (undo-tree-id2974 . -1) (undo-tree-id2975 . -7) (undo-tree-id2976 . -7) (undo-tree-id2977 . -7) (undo-tree-id2978 . -7) (undo-tree-id2979 . -7) (undo-tree-id2980 . -7) (undo-tree-id2981 . -7) (undo-tree-id2982 . -7) (undo-tree-id2983 . -1) (undo-tree-id2984 . -7) (undo-tree-id2985 . -7) (undo-tree-id2986 . -7) (undo-tree-id2987 . -7) (undo-tree-id2988 . -7) (undo-tree-id2989 . -7) (undo-tree-id2990 . -7) (undo-tree-id2991 . -7) (undo-tree-id2992 . -1) (undo-tree-id2993 . -7) (undo-tree-id2994 . -7) (undo-tree-id2995 . -7) (undo-tree-id2996 . -7) (undo-tree-id2997 . -7) (undo-tree-id2998 . -7) (undo-tree-id2999 . -7) (undo-tree-id3000 . -7) (undo-tree-id3001 . -1) (undo-tree-id3002 . -7) (undo-tree-id3003 . -7) (undo-tree-id3004 . -7) (undo-tree-id3005 . -7) (undo-tree-id3006 . -7) (undo-tree-id3007 . -7) (undo-tree-id3008 . -7) (undo-tree-id3009 . -7) (undo-tree-id3010 . -1) (undo-tree-id3011 . -7) (undo-tree-id3012 . -7) (undo-tree-id3013 . -7) (undo-tree-id3014 . -7) (undo-tree-id3015 . -7) (undo-tree-id3016 . -7) (undo-tree-id3017 . -7) (undo-tree-id3018 . -7) (undo-tree-id3019 . -1) (undo-tree-id3020 . -7) (undo-tree-id3021 . -7) (undo-tree-id3022 . -7) (undo-tree-id3023 . -7) (undo-tree-id3024 . -7) (undo-tree-id3025 . -7) (undo-tree-id3026 . -7) (undo-tree-id3027 . -7) (undo-tree-id3028 . -1) (undo-tree-id3029 . -7) (undo-tree-id3030 . -7) (undo-tree-id3031 . -7) (undo-tree-id3032 . -7) (undo-tree-id3033 . -7) (undo-tree-id3034 . -7) (undo-tree-id3035 . -7) (undo-tree-id3036 . -7) (undo-tree-id3037 . -1) (undo-tree-id3038 . -7) (undo-tree-id3039 . -7) (undo-tree-id3040 . -7) (undo-tree-id3041 . -7) (undo-tree-id3042 . -7) (undo-tree-id3043 . -7) (undo-tree-id3044 . -7) (undo-tree-id3045 . -7) (undo-tree-id3046 . -1) (undo-tree-id3047 . -7) (undo-tree-id3048 . -7) (undo-tree-id3049 . -7) (undo-tree-id3050 . -7) (undo-tree-id3051 . -7) (undo-tree-id3052 . -7) (undo-tree-id3053 . -7) (undo-tree-id3054 . -7) (undo-tree-id3055 . -7) (undo-tree-id3056 . -7) (undo-tree-id3057 . -7) (undo-tree-id3058 . -7) (undo-tree-id3059 . -7) (undo-tree-id3060 . -7) (undo-tree-id3061 . -7) (undo-tree-id3062 . -7) (undo-tree-id3063 . -7) (undo-tree-id3064 . -7) (undo-tree-id3065 . -7) (undo-tree-id3066 . -7) (undo-tree-id3067 . -7) (undo-tree-id3068 . -7) (undo-tree-id3069 . -7) (undo-tree-id3070 . -7) (undo-tree-id3071 . -1) (undo-tree-id3072 . -7) (undo-tree-id3073 . -7) (undo-tree-id3074 . -7) (undo-tree-id3075 . -7) (undo-tree-id3076 . -7) (undo-tree-id3077 . -7) 1552) nil (25467 41874 323168 0) 0 nil])
([nil nil ((#("header\")

" 0 5 (fontified t face font-lock-string-face) 5 6 (rear-nonsticky t fontified t face font-lock-string-face) 6 7 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t face font-lock-string-face) 7 8 (result t prompt t rear-nonsticky (prompt result) front-sticky (prompt result) fontified t) 8 9 (rear-nonsticky t fontified t) 9 10 (fontified t ws-butler-chg chg)) . -1535) (undo-tree-id2476 . -10) (undo-tree-id2477 . -10) (undo-tree-id2478 . -9) (undo-tree-id2479 . -10) (undo-tree-id2480 . -10) (undo-tree-id2481 . -10) (undo-tree-id2482 . -10) (undo-tree-id2483 . -10) (undo-tree-id2484 . -10) (undo-tree-id2485 . -10) (undo-tree-id2486 . -10) (undo-tree-id2487 . -10) (undo-tree-id2488 . -10) (undo-tree-id2489 . -10) (undo-tree-id2490 . -10) (undo-tree-id2491 . -10) (undo-tree-id2492 . -10) (undo-tree-id2493 . -10) (undo-tree-id2494 . -10) (undo-tree-id2495 . -10) (undo-tree-id2496 . -10) (undo-tree-id2497 . -10) (undo-tree-id2498 . -10) (undo-tree-id2499 . -10) (undo-tree-id2500 . -10) (undo-tree-id2501 . -10) (undo-tree-id2502 . -10) (undo-tree-id2503 . -10) (undo-tree-id2504 . -10) (undo-tree-id2505 . -10) (undo-tree-id2506 . -10) (undo-tree-id2507 . -10) (undo-tree-id2508 . -10) (undo-tree-id2509 . -10) (undo-tree-id2510 . -10) (undo-tree-id2511 . -10) (undo-tree-id2512 . -10) (undo-tree-id2513 . -10) (undo-tree-id2514 . -10) (undo-tree-id2515 . -10) (undo-tree-id2516 . -10) (undo-tree-id2517 . -10) (undo-tree-id2518 . -10) (undo-tree-id2519 . -10) (undo-tree-id2520 . -10) (undo-tree-id2521 . -10) (undo-tree-id2522 . -10) (undo-tree-id2523 . -10) (undo-tree-id2524 . -10) (undo-tree-id2525 . -10) (undo-tree-id2526 . -10) (undo-tree-id2527 . -10) (undo-tree-id2528 . -10) (undo-tree-id2529 . -10) (undo-tree-id2530 . -10) (undo-tree-id2531 . -10) (undo-tree-id2532 . -10) (undo-tree-id2533 . -10) (undo-tree-id2534 . -10) (undo-tree-id2535 . -10) (undo-tree-id2536 . -10) (undo-tree-id2537 . -10) (undo-tree-id2538 . -10) (undo-tree-id2539 . -10) (undo-tree-id2540 . -10) (undo-tree-id2541 . -10) (undo-tree-id2542 . -10) (undo-tree-id2543 . -10) (undo-tree-id2544 . -10) (undo-tree-id2545 . -10) (undo-tree-id2546 . -10) (undo-tree-id2547 . -10) (undo-tree-id2548 . -10) (undo-tree-id2549 . -10) (undo-tree-id2550 . -10) (undo-tree-id2551 . -10) (undo-tree-id2552 . -10) (undo-tree-id2553 . -10) (undo-tree-id2554 . -10) (undo-tree-id2555 . -10) (undo-tree-id2556 . -10) (undo-tree-id2557 . -10) (undo-tree-id2558 . -10) (undo-tree-id2559 . -10) (undo-tree-id2560 . -10) (undo-tree-id2561 . -10) (undo-tree-id2562 . -10) (undo-tree-id2563 . -10) (undo-tree-id2564 . -10) (undo-tree-id2565 . -10) (undo-tree-id2566 . -10) (undo-tree-id2567 . -10) (undo-tree-id2568 . -10) (undo-tree-id2569 . -7) (undo-tree-id2570 . -8) (undo-tree-id2571 . -10) (undo-tree-id2572 . -10) (undo-tree-id2573 . -10) (undo-tree-id2574 . -10) (undo-tree-id2575 . -10) (undo-tree-id2576 . -10) (undo-tree-id2577 . -10) (undo-tree-id2578 . -10) (undo-tree-id2579 . -10) (undo-tree-id2580 . -10) (undo-tree-id2581 . -10) (undo-tree-id2582 . -10) (undo-tree-id2583 . -10) (undo-tree-id2584 . -10) (undo-tree-id2585 . -10) (undo-tree-id2586 . -10) (undo-tree-id2587 . -10) (undo-tree-id2588 . -10) (undo-tree-id2589 . -10) (undo-tree-id2590 . -10) (undo-tree-id2591 . -10) (undo-tree-id2592 . -10) (undo-tree-id2593 . -10) (undo-tree-id2594 . -10) (undo-tree-id2595 . -10) (undo-tree-id2596 . -10) (undo-tree-id2597 . -10) (undo-tree-id2598 . -10) (undo-tree-id2599 . -10) (undo-tree-id2600 . -10) (undo-tree-id2601 . -10) (undo-tree-id2602 . -10) (undo-tree-id2603 . -10) (undo-tree-id2604 . -10) (undo-tree-id2605 . -10) (undo-tree-id2606 . -10) (undo-tree-id2607 . -10) (undo-tree-id2608 . -10) (undo-tree-id2609 . -10) (undo-tree-id2610 . -10) (undo-tree-id2611 . -10) (undo-tree-id2612 . -10) (undo-tree-id2613 . -10) (undo-tree-id2614 . -10) (undo-tree-id2615 . -10) (undo-tree-id2616 . -10) (undo-tree-id2617 . -10) (undo-tree-id2618 . -10) (undo-tree-id2619 . -10) (undo-tree-id2620 . -10) (undo-tree-id2621 . -10) (undo-tree-id2622 . -10) (undo-tree-id2623 . -10) (undo-tree-id2624 . -10) (undo-tree-id2625 . -10) (undo-tree-id2626 . -10) (undo-tree-id2627 . -10) (undo-tree-id2628 . -10) (undo-tree-id2629 . -10) (undo-tree-id2630 . -10) (undo-tree-id2631 . -10) (undo-tree-id2632 . -10) (undo-tree-id2633 . -10) (undo-tree-id2634 . -10) (undo-tree-id2635 . -10) (undo-tree-id2636 . -10) (undo-tree-id2637 . -10) (undo-tree-id2638 . -10) (undo-tree-id2639 . -10) (undo-tree-id2640 . -10) (undo-tree-id2641 . -10) (undo-tree-id2642 . -10) (undo-tree-id2643 . -10) (undo-tree-id2644 . -10) (undo-tree-id2645 . -10) (undo-tree-id2646 . -10) (undo-tree-id2647 . -10) (undo-tree-id2648 . -10) (undo-tree-id2649 . -10) (undo-tree-id2650 . -10) (undo-tree-id2651 . -10) (undo-tree-id2652 . -10) (undo-tree-id2653 . -10) (undo-tree-id2654 . -10) (undo-tree-id2655 . -10) (undo-tree-id2656 . -10) (undo-tree-id2657 . -10) (undo-tree-id2658 . -10) (undo-tree-id2659 . -10) (undo-tree-id2660 . -10) (undo-tree-id2661 . -10) (undo-tree-id2662 . -10) (undo-tree-id2663 . -10) (undo-tree-id2664 . -10) (undo-tree-id2665 . -10) (undo-tree-id2666 . -10) (undo-tree-id2667 . -10) (undo-tree-id2668 . -10) (undo-tree-id2669 . -10) (undo-tree-id2670 . -10) (undo-tree-id2671 . -10) (undo-tree-id2672 . -10) (undo-tree-id2673 . -10) (undo-tree-id2674 . -10) (undo-tree-id2675 . -10) (undo-tree-id2676 . -10) (undo-tree-id2677 . -10) (undo-tree-id2678 . -10) (undo-tree-id2679 . -10) (undo-tree-id2680 . -10) (undo-tree-id2681 . -10) (undo-tree-id2682 . -10) (undo-tree-id2683 . -10) (undo-tree-id2684 . -10) (undo-tree-id2685 . -10) (undo-tree-id2686 . -10) (undo-tree-id2687 . -10) (undo-tree-id2688 . -10) (undo-tree-id2689 . -10) (undo-tree-id2690 . -10) (undo-tree-id2691 . -10) (undo-tree-id2692 . -10) (undo-tree-id2693 . -10) (undo-tree-id2694 . -10) (undo-tree-id2695 . -10) (undo-tree-id2696 . -10) (undo-tree-id2697 . -10) (undo-tree-id2698 . -10) (undo-tree-id2699 . -10) (undo-tree-id2700 . -10) (undo-tree-id2701 . -10) (undo-tree-id2702 . -10) (undo-tree-id2703 . -10) (undo-tree-id2704 . -10) (undo-tree-id2705 . -10) (undo-tree-id2706 . -10) (undo-tree-id2707 . -10) (undo-tree-id2708 . -10) (undo-tree-id2709 . -10) (undo-tree-id2710 . -10) (undo-tree-id2711 . -10) (undo-tree-id2712 . -10) (undo-tree-id2713 . -10) (undo-tree-id2714 . -10) (undo-tree-id2715 . -10) (undo-tree-id2716 . -10) (undo-tree-id2717 . -10) (undo-tree-id2718 . -10) (undo-tree-id2719 . -10) (undo-tree-id2720 . -10) (undo-tree-id2721 . -10) (undo-tree-id2722 . -10) (undo-tree-id2723 . -10) (undo-tree-id2724 . -10) (undo-tree-id2725 . -10) (undo-tree-id2726 . -10) (undo-tree-id2727 . -10) (undo-tree-id2728 . -10) (undo-tree-id2729 . -10) (undo-tree-id2730 . -10) (undo-tree-id2731 . -10) (undo-tree-id2732 . -10) (undo-tree-id2733 . -10) (undo-tree-id2734 . -10) (undo-tree-id2735 . -10) (undo-tree-id2736 . -10) (undo-tree-id2737 . -10) (undo-tree-id2738 . -10) (undo-tree-id2739 . -10) (undo-tree-id2740 . -10) (undo-tree-id2741 . -10) (undo-tree-id2742 . -10) (undo-tree-id2743 . -10) (undo-tree-id2744 . -10) (undo-tree-id2745 . -10) (undo-tree-id2746 . -10) (undo-tree-id2747 . -10) (undo-tree-id2748 . -10) (undo-tree-id2749 . -10) (undo-tree-id2750 . -10) (undo-tree-id2751 . -10) (undo-tree-id2752 . -10) (undo-tree-id2753 . -10) (undo-tree-id2754 . -10) (undo-tree-id2755 . -10) (undo-tree-id2756 . -10) (undo-tree-id2757 . -10) (undo-tree-id2758 . -10) (undo-tree-id2759 . -10) (undo-tree-id2760 . -10) (undo-tree-id2761 . -10) (undo-tree-id2762 . -10) (undo-tree-id2763 . -10) (undo-tree-id2764 . -10) (undo-tree-id2765 . -10) (undo-tree-id2766 . -10) (undo-tree-id2767 . -10) (undo-tree-id2768 . -10) (undo-tree-id2769 . -10) (undo-tree-id2770 . -10) (undo-tree-id2771 . -10) (undo-tree-id2772 . -10) (undo-tree-id2773 . -10) (undo-tree-id2774 . -10) (undo-tree-id2775 . -10) (undo-tree-id2776 . -10) (undo-tree-id2777 . -10) (undo-tree-id2778 . -10) (undo-tree-id2779 . -10) (undo-tree-id2780 . -10) (undo-tree-id2781 . -10) (undo-tree-id2782 . -10) (undo-tree-id2783 . -10) (undo-tree-id2784 . -10) (undo-tree-id2785 . -10) (undo-tree-id2786 . -10) (undo-tree-id2787 . -10) (undo-tree-id2788 . -10) (undo-tree-id2789 . -10) (undo-tree-id2790 . -10) (undo-tree-id2791 . -10) (undo-tree-id2792 . -10) (undo-tree-id2793 . -10) (undo-tree-id2794 . -10) (undo-tree-id2795 . -10) (undo-tree-id2796 . -10) (undo-tree-id2797 . -10) (undo-tree-id2798 . -10) (undo-tree-id2799 . -10) (undo-tree-id2800 . -10) (undo-tree-id2801 . -10) (undo-tree-id2802 . -10) (undo-tree-id2803 . -10) (undo-tree-id2804 . -10) (undo-tree-id2805 . -10) (undo-tree-id2806 . -10) (undo-tree-id2807 . -10) (undo-tree-id2808 . -10) (undo-tree-id2809 . -10) (undo-tree-id2810 . -10) (undo-tree-id2811 . -10) (undo-tree-id2812 . -10) (undo-tree-id2813 . -10) (undo-tree-id2814 . -10) (undo-tree-id2815 . -10) (undo-tree-id2816 . -10) (undo-tree-id2817 . -10) (undo-tree-id2818 . -10) (undo-tree-id2819 . -10) (undo-tree-id2820 . -10) (undo-tree-id2821 . -10) (undo-tree-id2822 . -10) (undo-tree-id2823 . -10) (undo-tree-id2824 . -10) (undo-tree-id2825 . -10) (undo-tree-id2826 . -10) (undo-tree-id2827 . -10) (undo-tree-id2828 . -10) (undo-tree-id2829 . -10) (undo-tree-id2830 . -10) (undo-tree-id2831 . -10) (undo-tree-id2832 . -10) (undo-tree-id2833 . -10) (undo-tree-id2834 . -10) (undo-tree-id2835 . -10) (undo-tree-id2836 . -10) (undo-tree-id2837 . -10) (undo-tree-id2838 . -10) (undo-tree-id2839 . -10) (undo-tree-id2840 . -10) (undo-tree-id2841 . -10) (undo-tree-id2842 . -10) (undo-tree-id2843 . -10) (undo-tree-id2844 . -10) (undo-tree-id2845 . -10) (undo-tree-id2846 . -10) 1545) ((1535 . 1545)) (25467 41874 322043 0) 0 nil])
nil
